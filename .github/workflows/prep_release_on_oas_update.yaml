name: Prepare client release from OpenAPI Spec Update

on:
  push:
    branches:
      - main
    paths:
      - openapi_spec/openapi-original.yaml
  workflow_dispatch:

jobs:
  prepare_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get commit hash
        id: get_commit
        run: |
          echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Set branch name
        id: branch_name
        run: |
          BRANCH_NAME="release/oas-update-commit-${{ steps.get_commit.outputs.COMMIT_HASH }}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git checkout -b ${{ steps.branch_name.outputs.BRANCH_NAME }}
          git push -u origin ${{ steps.branch_name.outputs.BRANCH_NAME }}

      - name: Create GitHub Issue
        id: create_issue
        run: |
          # Get current date
          DATE=$(date +'%Y-%m-%d')
          ISSUE_OUTPUT=$(gh issue create \
            --title "Release new client based on OpenAPI Specification Update - $DATE" \
            --body "The OpenAPI specification has been updated in the repository.
            
            Please review the changes and prepare new client version for publishing.
      
            Release branch name: ${{ steps.branch_name.outputs.BRANCH_NAME }}
            Pull Request: ${{ github.server_url }}/${{ github.repository }}/pull/new/${{ steps.branch_name.outputs.BRANCH_NAME }}" \
            --json number -q '.number') # Capture the issue number
      
          echo "ISSUE_NUMBER=$ISSUE_OUTPUT" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create draft pull request
        run: |
          DATE=$(date +'%Y-%m-%d')
          gh pr create \
            --title "Release new client based on OpenAPI Specification Update - $DATE" \
            --body "This PR is created automatically when the OpenAPI specification is updated in the repository.
      
            Documentation on client generation can be found [here](https://github.com/nomtek/mistralai_client_dart/blob/main/doc/contribute/Client-Code-Generation.md)
      
            Closes #${{ steps.create_issue.outputs.ISSUE_NUMBER }} # Link to the created issue
      
            Checklist of things must to do:
              - [ ] client changes according to [docs](https://github.com/nomtek/mistralai_client_dart/blob/main/doc/contribute/Client-Code-Generation.md)
              - [ ] update `CHANGELOG.md`
              - [ ] bump version in `pubspec.yaml` (following semantic versioning)
              - [ ] check if all existing examples are working (for example use openapi_specs/run_all_examples.dart script)
      
            Checklist of things that should be done (if needed):
              - [ ] add examples in `examples/*` (if necessary based on client changes)
              - [ ] update README.md (if necessary based on client changes and examples)
            " \
            --draft \
            --base main \
            --head ${{ steps.branch_name.outputs.BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
